diff --git a/mereproof/contracts/token.ral b/mereproof/contracts/token.ral
deleted file mode 100644
index 580e5b5..0000000
--- a/mereproof/contracts/token.ral
+++ /dev/null
@@ -1,69 +0,0 @@
-import "std/fungible_token_interface"
-
-// Defines a contract named `TokenFaucet`.
-// A contract is a collection of fields (its state) and functions.
-// Once deployed, a contract resides at a specific address on the Alephium blockchain.
-// Contract fields are permanently stored in contract storage.
-// A contract can issue an initial amount of token at its deployment.
-Contract TokenFaucet(
-    symbol: ByteVec,
-    name: ByteVec,
-    decimals: U256,
-    supply: U256,
-    mut balance: U256
-) implements IFungibleToken {
-
-    // Events allow for logging of activities on the blockchain.
-    // Alephium clients can listen to events in order to react to contract state changes.
-    event Withdraw(to: Address, amount: U256)
-
-    enum ErrorCodes {
-        InvalidWithdrawAmount = 0
-    }
-
-    // A public function that returns the initial supply of the contract's token.
-    // Note that the field must be initialized as the amount of the issued token.
-    pub fn getTotalSupply() -> U256 {
-        return supply
-    }
-
-    // A public function that returns the symbol of the token.
-    pub fn getSymbol() -> ByteVec {
-        return symbol
-    }
-
-    // A public function that returns the name of the token.
-    pub fn getName() -> ByteVec {
-        return name
-    }
-
-    // A public function that returns the decimals of the token.
-    pub fn getDecimals() -> U256 {
-        return decimals
-    }
-
-    // A public function that returns the current balance of the contract.
-    pub fn balance() -> U256 {
-        return balance
-    }
-
-    // A public function that transfers tokens to anyone who calls it.
-    // The function is annotated with `updateFields = true` as it changes the contract fields.
-    // The function is annotated as using contract assets as it does.
-    // The function is annotated with `checkExternalCaller = false` as there is no need to check the external caller.
-    @using(assetsInContract = true, updateFields = true, checkExternalCaller = false)
-    pub fn withdraw(amount: U256) -> () {
-        // Debug events can be helpful for error analysis
-        emit Debug(`The current balance is ${balance}`)
-
-        // Make sure the amount is valid
-        assert!(amount <= 2, ErrorCodes.InvalidWithdrawAmount)
-        // Functions postfixed with `!` are built-in functions.
-        transferTokenFromSelf!(callerAddress!(), selfTokenId!(), amount)
-        // Ralph does not allow underflow.
-        balance = balance - amount
-
-        // Emit the event defined earlier.
-        emit Withdraw(callerAddress!(), amount)
-    }
-}
diff --git a/mereproof/contracts/withdraw.ral b/mereproof/contracts/withdraw.ral
deleted file mode 100644
index c54ba1a..0000000
--- a/mereproof/contracts/withdraw.ral
+++ /dev/null
@@ -1,8 +0,0 @@
-// Defines a transaction script.
-// A transaction script is a piece of code to interact with contracts on the blockchain.
-// Transaction scripts can use the input assets of transactions in general.
-// A script is disposable and will only be executed once along with the holder transaction.
-TxScript Withdraw(token: TokenFaucet, amount: U256) {
-    // Call token contract's withdraw function.
-    token.withdraw(amount)
-}
diff --git a/mereproof/next.config.js b/mereproof/next.config.js
index 3c0e22e..2565ba7 100644
--- a/mereproof/next.config.js
+++ b/mereproof/next.config.js
@@ -1,6 +1,8 @@
 /** @type {import('next').NextConfig} */
 const nextConfig = {
   reactStrictMode: true,
+  output: "standalone",
+  productionBrowserSourceMaps: true,
   webpack: (config, { isServer }) => {
     if (!isServer) {
       config.resolve.fallback.fs = false
diff --git a/mereproof/scripts/0_deploy_faucet.ts b/mereproof/scripts/0_deploy_faucet.ts
deleted file mode 100644
index 3d1fa6f..0000000
--- a/mereproof/scripts/0_deploy_faucet.ts
+++ /dev/null
@@ -1,29 +0,0 @@
-import { Deployer, DeployFunction, Network } from '@alephium/cli'
-import { Settings } from '../alephium.config'
-import { TokenFaucet } from '../artifacts/ts'
-
-// This deploy function will be called by cli deployment tool automatically
-// Note that deployment scripts should prefixed with numbers (starting from 0)
-const deployFaucet: DeployFunction<Settings> = async (
-  deployer: Deployer,
-  network: Network<Settings>
-): Promise<void> => {
-  // Get settings
-  const issueTokenAmount = network.settings.issueTokenAmount
-  const result = await deployer.deployContract(TokenFaucet, {
-    // The amount of token to be issued
-    issueTokenAmount: issueTokenAmount,
-    // The initial states of the faucet contract
-    initialFields: {
-      symbol: Buffer.from('TF', 'utf8').toString('hex'),
-      name: Buffer.from('TokenFaucet', 'utf8').toString('hex'),
-      decimals: 0n,
-      supply: issueTokenAmount,
-      balance: issueTokenAmount
-    }
-  })
-  console.log('Token faucet contract id: ' + result.contractInstance.contractId)
-  console.log('Token faucet contract address: ' + result.contractInstance.address)
-}
-
-export default deployFaucet
diff --git a/mereproof/src/components/MereProofDapp.tsx b/mereproof/src/components/MereProofDapp.tsx
new file mode 100644
index 0000000..2989256
--- /dev/null
+++ b/mereproof/src/components/MereProofDapp.tsx
@@ -0,0 +1,67 @@
+import React, { useCallback } from 'react'
+import { FC, useState } from 'react'
+import styles from '../styles/Home.module.css'
+import { TxStatus } from './TxStatus'
+import { useWallet } from '@alephium/web3-react'
+import { web3, node, ExplorerProvider } from '@alephium/web3'
+import { MereProofConfig } from '@/services/utils'
+import { anchorHash } from '@/services/mereproof.service'
+import configuration from '../../alephium.config'
+
+
+export const MereProofDapp: FC<{
+  config: MereProofConfig
+}> = ({ config }) => {
+  const { signer, account, explorerProvider } = useWallet()
+  web3.setCurrentNodeProvider(configuration.networks[config.network].nodeUrl)
+
+  const [hash, setHash] = useState('de1ec7ab1e5e1ec7edc0ffee')
+  const [ongoingTxId, setOngoingTxId] = useState<string>()
+
+  const handleHashSubmit = async (e: React.FormEvent) => {
+    e.preventDefault()
+    if (signer) {
+      const result = await anchorHash(signer, account, hash) 
+      console.log(result)
+      setOngoingTxId(result.txId)
+    }
+  }
+
+  const txStatusCallback = useCallback(
+    async (status: node.TxStatus, numberOfChecks: number): Promise<any> => {
+      if ((status.type === 'Confirmed' && numberOfChecks > 2) || (status.type === 'TxNotFound' && numberOfChecks > 3)) {
+        setOngoingTxId(undefined)
+        console.log(status.type);
+      }
+
+      return Promise.resolve()
+    },
+    [setOngoingTxId]
+  )
+
+  console.log('ongoing..', ongoingTxId)
+  return (
+    <>
+      {ongoingTxId && <TxStatus txId={ongoingTxId} txStatusCallback={txStatusCallback} />}
+
+      <div className="columns">
+        <form onSubmit={handleHashSubmit}>
+          <>
+            <h2 className={styles.title}>Anchor hash on Alephium {config.network}</h2>
+            <p>PublicKey: {account?.publicKey ?? '???'}</p>
+            <label htmlFor="hash">Hash</label>
+            <input
+              type="string"
+              id="hash"
+              name="hash"
+              value={hash}
+              onChange={(e) => setHash(e.target.value)}
+            />
+            <br />
+            <input type="submit" disabled={!!ongoingTxId} value="Anchor hash" />
+          </>
+        </form>
+      </div>
+    </>
+  )
+}
diff --git a/mereproof/src/components/TokenDapp.tsx b/mereproof/src/components/TokenDapp.tsx
deleted file mode 100644
index d247b1b..0000000
--- a/mereproof/src/components/TokenDapp.tsx
+++ /dev/null
@@ -1,79 +0,0 @@
-import React, { useCallback } from 'react'
-import { FC, useState } from 'react'
-import styles from '../styles/Home.module.css'
-import { withdrawToken } from '@/services/token.service'
-import { TxStatus } from './TxStatus'
-import { useWallet } from '@alephium/web3-react'
-import { node } from '@alephium/web3'
-import { TokenFaucetConfig } from '@/services/utils'
-
-export const TokenDapp: FC<{
-  config: TokenFaucetConfig
-}> = ({ config }) => {
-  const { signer, account } = useWallet()
-  const addressGroup = config.groupIndex
-  const [withdrawAmount, setWithdrawAmount] = useState('')
-  const [ongoingTxId, setOngoingTxId] = useState<string>()
-
-  const handleWithdrawSubmit = async (e: React.FormEvent) => {
-    e.preventDefault()
-    if (signer) {
-      const result = await withdrawToken(signer, withdrawAmount, config.faucetTokenId)
-      setOngoingTxId(result.txId)
-    }
-  }
-
-  const txStatusCallback = useCallback(
-    async (status: node.TxStatus, numberOfChecks: number): Promise<any> => {
-      if ((status.type === 'Confirmed' && numberOfChecks > 2) || (status.type === 'TxNotFound' && numberOfChecks > 3)) {
-        setOngoingTxId(undefined)
-      }
-
-      return Promise.resolve()
-    },
-    [setOngoingTxId]
-  )
-
-  console.log('ongoing..', ongoingTxId)
-  return (
-    <>
-      {ongoingTxId && <TxStatus txId={ongoingTxId} txStatusCallback={txStatusCallback} />}
-
-      <div className="columns">
-        <form onSubmit={handleWithdrawSubmit}>
-          <>
-            <h2 className={styles.title}>Alephium Token Faucet on {config.network}</h2>
-            <p>PublicKey: {account?.publicKey ?? '???'}</p>
-            <p>Maximum 2 tokens can be withdrawn at a time.</p>
-            <table>
-              <thead>
-                <tr>
-                  <td>id</td>
-                  <th>group</th>
-                </tr>
-              </thead>
-              <tbody>
-                <tr key={addressGroup} style={{ background: 'red', color: 'white' }}>
-                  <td>{config.faucetTokenId}</td>
-                  <td>{addressGroup}</td>
-                </tr>
-              </tbody>
-            </table>
-            <label htmlFor="withdraw-amount">Amount</label>
-            <input
-              type="number"
-              id="transfer-amount"
-              name="amount"
-              max="2"
-              min="1"
-              value={withdrawAmount}
-              onChange={(e) => setWithdrawAmount(e.target.value)}
-            />
-            <br />
-            <input type="submit" disabled={!!ongoingTxId} value="Send Me Token" />
-          </>
-        </form>
-      </div>
-    </>
-  )
-}
diff --git a/mereproof/src/pages/_app.tsx b/mereproof/src/pages/_app.tsx
index 0920d8e..8d9b219 100644
--- a/mereproof/src/pages/_app.tsx
+++ b/mereproof/src/pages/_app.tsx
@@ -2,14 +2,13 @@ import React from 'react'
 import '@/styles/globals.css'
 import type { AppProps } from 'next/app'
 import { AlephiumWalletProvider } from '@alephium/web3-react'
-import { tokenFaucetConfig } from '@/services/utils'
+import { mereProofConfig } from '@/services/utils'
 
 export default function App({ Component, pageProps }: AppProps) {
   return (
     <AlephiumWalletProvider
       theme="web95"
-      network={tokenFaucetConfig.network}
-      addressGroup={tokenFaucetConfig.groupIndex}
+      network={mereProofConfig.network}
     >
       <Component {...pageProps} />
     </AlephiumWalletProvider>
diff --git a/mereproof/src/pages/index.tsx b/mereproof/src/pages/index.tsx
index baa16ec..45eb46c 100644
--- a/mereproof/src/pages/index.tsx
+++ b/mereproof/src/pages/index.tsx
@@ -1,9 +1,9 @@
 import React from 'react'
 import Head from 'next/head'
 import styles from '@/styles/Home.module.css'
-import { TokenDapp } from '@/components/TokenDapp'
+import { MereProofDapp } from '@/components/MereProofDapp'
 import { AlephiumConnectButton, useWallet } from '@alephium/web3-react'
-import { tokenFaucetConfig } from '@/services/utils'
+import { mereProofConfig } from '@/services/utils'
 
 export default function Home() {
   const { connectionStatus } = useWallet()
@@ -13,13 +13,13 @@ export default function Home() {
       <div className={styles.container}>
         <AlephiumConnectButton />
         <Head>
-          <title>Token Faucet</title>
+          <title>MereProof</title>
           <meta name="description" content="Generated by @alephium/cli init" />
           <meta name="viewport" content="width=device-width, initial-scale=1" />
           <link rel="icon" href="/favicon.ico" />
         </Head>
 
-        {connectionStatus === 'connected' && <TokenDapp config={tokenFaucetConfig} />}
+        {connectionStatus === 'connected' && <MereProofDapp config={mereProofConfig} />}
       </div>
     </>
   )
diff --git a/mereproof/src/services/mereproof.service.ts b/mereproof/src/services/mereproof.service.ts
new file mode 100644
index 0000000..8865893
--- /dev/null
+++ b/mereproof/src/services/mereproof.service.ts
@@ -0,0 +1,20 @@
+import { DUST_AMOUNT, NodeProvider, SignerProvider, Account, SignTransferTxResult } from '@alephium/web3'
+import { getDefaultAlephiumWallet } from "@alephium/get-extension-wallet"
+
+export const anchorHash = async (
+  signerProvider: SignerProvider,
+  account: Account,
+  hash: string,
+): Promise<SignTransferTxResult> => {
+  return await signerProvider.signAndSubmitTransferTx({
+    destinations: [
+      {
+        address: account.address,
+        attoAlphAmount: DUST_AMOUNT,
+        message: hash
+      }
+    ],
+    signerAddress: account.address
+  })
+}
+
diff --git a/mereproof/src/services/token.service.ts b/mereproof/src/services/token.service.ts
deleted file mode 100644
index fcdc028..0000000
--- a/mereproof/src/services/token.service.ts
+++ /dev/null
@@ -1,16 +0,0 @@
-import { DUST_AMOUNT, ExecuteScriptResult, SignerProvider } from '@alephium/web3'
-import { Withdraw } from '../../artifacts/ts/scripts'
-
-export const withdrawToken = async (
-  signerProvider: SignerProvider,
-  amount: string,
-  tokenId: string
-): Promise<ExecuteScriptResult> => {
-  return await Withdraw.execute(signerProvider, {
-    initialFields: {
-      token: tokenId,
-      amount: BigInt(amount)
-    },
-    attoAlphAmount: DUST_AMOUNT
-  })
-}
diff --git a/mereproof/src/services/utils.tsx b/mereproof/src/services/utils.tsx
index 01b95a1..1f2707f 100644
--- a/mereproof/src/services/utils.tsx
+++ b/mereproof/src/services/utils.tsx
@@ -1,25 +1,18 @@
 import { NetworkId } from '@alephium/web3'
-import { loadDeployments } from '../../artifacts/ts/deployments'
+// import { loadDeployments } from '../../artifacts/ts/deployments'
 
-export interface TokenFaucetConfig {
+export interface MereProofConfig {
   network: NetworkId
-  groupIndex: number
-  tokenFaucetAddress: string
-  faucetTokenId: string
 }
 
 function getNetwork(): NetworkId {
-  const network = (process.env.NEXT_PUBLIC_NETWORK ?? 'devnet') as NetworkId
+  const network = (process.env.NEXT_PUBLIC_NETWORK ?? 'testnet') as NetworkId
   return network
 }
 
-function getTokenFaucetConfig(): TokenFaucetConfig {
+function getMereProofConfig(): MereProofConfig {
   const network = getNetwork()
-  const tokenFaucet = loadDeployments(network).contracts.TokenFaucet.contractInstance
-  const groupIndex = tokenFaucet.groupIndex
-  const tokenFaucetAddress = tokenFaucet.address
-  const faucetTokenId = tokenFaucet.contractId
-  return { network, groupIndex, tokenFaucetAddress, faucetTokenId }
+  return { network }
 }
 
-export const tokenFaucetConfig = getTokenFaucetConfig()
+export const mereProofConfig = getMereProofConfig()
diff --git a/mereproof/src/styles/globals.css b/mereproof/src/styles/globals.css
index 4a7390b..4122f47 100644
--- a/mereproof/src/styles/globals.css
+++ b/mereproof/src/styles/globals.css
@@ -2,6 +2,10 @@
   box-sizing: border-box;
 }
 
+input#hash {
+  width: 100%;
+}
+
 .columns {
   display: flex;
   grid-template-columns: 1fr 1fr;
